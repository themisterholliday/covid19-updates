#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const debug = require('debug')('covid19-updates:server');
const app = require('../app');
const { startSendEmailsJob } = require('../jobs/send-data');
const { startMongoose } = require('../services/mongoose.service');
const {
  sendCovidUpdateEmailsToUsers,
} = require('../services/send-emails.service');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

async function start() {
  return new Promise((resolve) => {
    // Start the express application
    /**
     * Get port from environment and store in Express.
     */
    const port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
     * Listen on provided port, on all network interfaces.
     */
    const server = http.createServer(app);
    server.listen(port, () => {
      console.log(`Server starting: Listening on port ${port}`);
      onListening(server);
      resolve();
    });
    server.on('error', (error) => onError(error, port));
    server.on('listening', () => onListening(server));

    startSendEmailsJob();
  });
}

(async () => {
  try {
    await startMongoose();
    await start();
    // runCronJobs()
  } catch (e) {
    console.log(e);
  }
})();
